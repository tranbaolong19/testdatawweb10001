from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import os
import re
import jwt
import datetime

# C·∫•u h√¨nh Flask
app = Flask(__name__)

# L·∫•y DATABASE_URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng v√† ki·ªÉm tra ƒë·ªãnh d·∫°ng
database_url = os.getenv("DATABASE_URL")
if not database_url:
    raise RuntimeError("‚ùå ERROR: DATABASE_URL is not set. Please check environment variables!")

if database_url.startswith("postgres://"):
    database_url = database_url.replace("postgres://", "postgresql://", 1)

app.config["SQLALCHEMY_DATABASE_URI"] = database_url
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

# K·∫øt n·ªëi database
db = SQLAlchemy(app)

# Kh√≥a b√≠ m·∫≠t JWT
SECRET_KEY = "your_secret_key"  # üî¥ C·∫ßn ƒë·∫∑t gi√° tr·ªã m·∫°nh h∆°n ho·∫∑c l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

# T·∫°o b·∫£ng User
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)

# API ki·ªÉm tra server c√≥ ho·∫°t ƒë·ªông kh√¥ng
@app.route("/health", methods=["GET"])
def health_check():
    return jsonify({"status": "ok"}), 200

# API ƒëƒÉng k√Ω t√†i kho·∫£n
@app.route("/register", methods=["POST"])
def register():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    # Ki·ªÉm tra username v√† password c√≥ h·ª£p l·ªá kh√¥ng
    if not username or not password:
        return jsonify({"message": "Username and password are required"}), 400
    if not re.match(r"^[a-zA-Z0-9_]+$", username):
        return jsonify({"message": "Username can only contain letters, numbers, and underscores"}), 400
    if len(password) < 6:
        return jsonify({"message": "Password must be at least 6 characters"}), 400

    # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
    existing_user = User.query.filter_by(username=username).first()
    if existing_user:
        return jsonify({"message": "Username already exists"}), 400

    # L∆∞u m·∫≠t kh·∫©u d∆∞·ªõi d·∫°ng hash
    hashed_password = generate_password_hash(password)
    new_user = User(username=username, password_hash=hashed_password)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201

# API ƒëƒÉng nh·∫≠p + JWT Token
@app.route("/login", methods=["POST"])
def login():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    # Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    user = User.query.filter_by(username=username).first()
    if not user or not check_password_hash(user.password_hash, password):
        return jsonify({"message": "Invalid username or password"}), 401

    # T·∫°o JWT Token
    token = jwt.encode(
        {"username": username, "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)},
        SECRET_KEY,
        algorithm="HS256"
    )

    return jsonify({"message": "Login successful", "token": token}), 200

# Ki·ªÉm tra k·∫øt n·ªëi database tr∆∞·ªõc khi ch·∫°y server
try:
    with app.app_context():
        db.create_all()
        db.engine.connect()
        print("‚úÖ Database connected successfully!")
except Exception as e:
    print(f"‚ùå ERROR: Cannot connect to database: {str(e)}")
    exit(1)  # D·ª´ng ch∆∞∆°ng tr√¨nh n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c database

# Ch·∫°y server Flask
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

